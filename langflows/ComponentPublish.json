{"description": "Visit https://docs.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.", "icon_bg_color": null, "updated_at": "2024-10-09T03:34:19+00:00", "webhook": false, "id": "37cbc54f-99ad-4619-9b99-af451b20072e", "user_id": "a0f1898f-e833-44c7-abed-76da6f8e0530", "folder_id": "6fa8a7bd-f479-4e51-9c1d-48b32a84aa46", "name": "ComponentPublish", "icon": null, "is_component": false, "endpoint_name": null, "data": {"nodes": [{"data": {"description": "Create a prompt template with dynamic variables.", "display_name": "Prompt", "id": "Prompt-KIm84", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "template": {"trace_as_input": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "REACT COMPONENT:\n{jsx}\n\nSTYLESHEET:\n{css}\n---\n\nGiven the React Component above, describe the purpose of the component and what it will display.\n\nPurpose:", "name": "template", "display_name": "Template", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "prompt", "load_from_db": false}, "jsx": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "password": false, "name": "jsx", "display_name": "jsx", "advanced": false, "input_types": ["Message", "Text"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}, "css": {"field_type": "str", "required": false, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "", "fileTypes": [], "file_path": "", "password": false, "name": "css", "display_name": "css", "advanced": false, "input_types": ["Message", "Text"], "dynamic": false, "info": "", "load_from_db": false, "title_case": false, "type": "str"}}, "description": "Create a prompt template with dynamic variables.", "icon": "prompts", "is_input": null, "is_output": null, "is_composition": null, "base_classes": ["Message"], "name": "", "display_name": "Prompt", "documentation": "", "custom_fields": {"template": ["jsx", "css"]}, "output_types": [], "full_path": null, "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "prompt", "hidden": false, "display_name": "Prompt Message", "method": "build_prompt", "value": "__UNDEFINED__", "cache": true}], "field_order": ["template"], "beta": false, "error": null, "edited": false, "lf_version": "1.0.18"}, "type": "Prompt"}, "dragging": false, "height": 498, "id": "Prompt-KIm84", "position": {"x": 1345.0103473674885, "y": 711.1506885311211}, "positionAbsolute": {"x": 1345.0103473674885, "y": 711.1506885311211}, "selected": false, "type": "genericNode", "width": 384}, {"data": {"description": "Implementation of Vector Store using Astra DB with search capabilities", "display_name": "Astra DB", "edited": false, "id": "AstraVectorStoreComponent-CsAeK", "node": {"template": {"_type": "Component", "embedding": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "embedding", "display_name": "Embedding or Astra Vectorize", "advanced": false, "input_types": ["Embeddings", "dict"], "dynamic": false, "info": "", "title_case": false, "type": "other"}, "ingest_data": {"trace_as_input": true, "trace_as_metadata": true, "list": true, "required": false, "placeholder": "", "show": true, "value": "", "name": "ingest_data", "display_name": "Ingest Data", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "", "title_case": false, "type": "other"}, "api_endpoint": {"load_from_db": false, "required": true, "placeholder": "", "show": true, "value": "https://b49e940b-3d31-4b69-a83f-564c19df1e17-us-east-2.apps.astra.datastax.com", "name": "api_endpoint", "display_name": "API Endpoint", "advanced": false, "input_types": [], "dynamic": false, "info": "API endpoint URL for the Astra DB service.", "title_case": false, "password": true, "type": "str"}, "batch_size": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "batch_size", "display_name": "Batch Size", "advanced": true, "dynamic": false, "info": "Optional number of data to process in a single batch.", "title_case": false, "type": "int"}, "bulk_delete_concurrency": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "bulk_delete_concurrency", "display_name": "Bulk Delete Concurrency", "advanced": true, "dynamic": false, "info": "Optional concurrency level for bulk delete operations.", "title_case": false, "type": "int"}, "bulk_insert_batch_concurrency": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "bulk_insert_batch_concurrency", "display_name": "Bulk Insert Batch Concurrency", "advanced": true, "dynamic": false, "info": "Optional concurrency level for bulk insert operations.", "title_case": false, "type": "int"}, "bulk_insert_overwrite_concurrency": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "bulk_insert_overwrite_concurrency", "display_name": "Bulk Insert Overwrite Concurrency", "advanced": true, "dynamic": false, "info": "Optional concurrency level for bulk insert operations that overwrite existing data.", "title_case": false, "type": "int"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_core.vectorstores import VectorStore\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    icon: str = \"AstraDB\"\n\n    _cached_vectorstore: VectorStore | None = None\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    def _build_vector_store_no_ingest(self):\n        if self._cached_vectorstore:\n            return self._cached_vectorstore\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options),\n                \"collection_embedding_api_key\": self.embedding.get(\"collection_embedding_api_key\"),\n            }\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._cached_vectorstore = vector_store\n\n        return vector_store\n\n    def build_vector_store(self):\n        vector_store = self._build_vector_store_no_ingest()\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self._build_vector_store_no_ingest()\n        self._add_documents_to_vector_store(vector_store)\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "collection_indexing_policy": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "collection_indexing_policy", "display_name": "Collection Indexing Policy", "advanced": true, "dynamic": false, "info": "Optional dictionary defining the indexing policy for the collection.", "title_case": false, "type": "str"}, "collection_name": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": true, "placeholder": "", "show": true, "value": "langflow", "name": "collection_name", "display_name": "Collection Name", "advanced": false, "dynamic": false, "info": "The name of the collection within Astra DB where the vectors will be stored.", "title_case": false, "type": "str"}, "metadata_indexing_exclude": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "metadata_indexing_exclude", "display_name": "Metadata Indexing Exclude", "advanced": true, "dynamic": false, "info": "Optional list of metadata fields to exclude from the indexing.", "title_case": false, "type": "str"}, "metadata_indexing_include": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "metadata_indexing_include", "display_name": "Metadata Indexing Include", "advanced": true, "dynamic": false, "info": "Optional list of metadata fields to include in the indexing.", "title_case": false, "type": "str"}, "metric": {"trace_as_metadata": true, "options": ["cosine", "dot_product", "euclidean"], "required": false, "placeholder": "", "show": true, "value": "", "name": "metric", "display_name": "Metric", "advanced": true, "dynamic": false, "info": "Optional distance metric for vector comparisons in the vector store.", "title_case": false, "type": "str"}, "namespace": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "namespace", "display_name": "Namespace", "advanced": true, "dynamic": false, "info": "Optional namespace within Astra DB to use for the collection.", "title_case": false, "type": "str"}, "number_of_results": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": 4, "name": "number_of_results", "display_name": "Number of Results", "advanced": true, "dynamic": false, "info": "Number of results to return.", "title_case": false, "type": "int"}, "pre_delete_collection": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": false, "name": "pre_delete_collection", "display_name": "Pre Delete Collection", "advanced": true, "dynamic": false, "info": "Boolean flag to determine whether to delete the collection before creating a new one.", "title_case": false, "type": "bool"}, "search_filter": {"trace_as_input": true, "list": true, "required": false, "placeholder": "", "show": true, "value": {}, "name": "search_filter", "display_name": "Search Metadata Filter", "advanced": true, "dynamic": false, "info": "Optional dictionary of filters to apply to the search query.", "title_case": false, "type": "dict"}, "search_input": {"trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "search_input", "display_name": "Search Input", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str"}, "search_score_threshold": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "value": 0, "name": "search_score_threshold", "display_name": "Search Score Threshold", "advanced": true, "dynamic": false, "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')", "title_case": false, "type": "float"}, "search_type": {"trace_as_metadata": true, "options": ["Similarity", "Similarity with score threshold", "MMR (Max Marginal Relevance)"], "required": false, "placeholder": "", "show": true, "value": "Similarity", "name": "search_type", "display_name": "Search Type", "advanced": true, "dynamic": false, "info": "Search type to use", "title_case": false, "type": "str"}, "setup_mode": {"trace_as_metadata": true, "options": ["Sync", "Async", "Off"], "required": false, "placeholder": "", "show": true, "value": "Sync", "name": "setup_mode", "display_name": "Setup Mode", "advanced": true, "dynamic": false, "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.", "title_case": false, "type": "str"}, "token": {"load_from_db": false, "required": true, "placeholder": "", "show": true, "value": "AstraCS:YbktErNvrQWFqXoyQwGvZCgM:ef3429c787d2a4dbbec14e01e2b0c947e43c11ccd33bee3dd4aa49de5983e758", "name": "token", "display_name": "Astra DB Application Token", "advanced": false, "input_types": [], "dynamic": false, "info": "Authentication token for accessing Astra DB.", "title_case": false, "password": true, "type": "str"}}, "description": "Implementation of Vector Store using Astra DB with search capabilities", "icon": "AstraDB", "base_classes": ["Data", "Retriever"], "display_name": "Astra DB", "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Retriever"], "selected": "Retriever", "name": "base_retriever", "display_name": "Retriever", "method": "build_base_retriever", "value": "__UNDEFINED__", "cache": true}, {"types": ["Data"], "selected": "Data", "name": "search_results", "display_name": "Search Results", "method": "search_documents", "value": "__UNDEFINED__", "cache": true}], "field_order": ["collection_name", "token", "api_endpoint", "search_input", "ingest_data", "namespace", "metric", "batch_size", "bulk_insert_batch_concurrency", "bulk_insert_overwrite_concurrency", "bulk_delete_concurrency", "setup_mode", "pre_delete_collection", "metadata_indexing_include", "embedding", "metadata_indexing_exclude", "collection_indexing_policy", "number_of_results", "search_type", "search_score_threshold", "search_filter"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "type": "AstraVectorStoreComponent"}, "dragging": false, "height": 723, "id": "AstraVectorStoreComponent-CsAeK", "position": {"x": 3313.274480689974, "y": 663.983028849612}, "positionAbsolute": {"x": 3313.274480689974, "y": 663.983028849612}, "selected": false, "type": "genericNode", "width": 384}, {"id": "TextInput-nPq0d", "type": "genericNode", "position": {"x": 881.4474157285047, "y": 1132.8152548369983}, "data": {"type": "TextInput", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.tsx</code> and save to reload. \n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tLearn React Here\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n", "name": "input_value", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Text to be passed as input.", "title_case": false, "type": "str"}}, "description": "Get text inputs from the Playground.", "icon": "type", "base_classes": ["Message"], "display_name": "JSX", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "text", "display_name": "Text", "method": "text_response", "value": "__UNDEFINED__", "cache": true, "hidden": false}], "field_order": ["input_value"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "TextInput-nPq0d"}, "selected": false, "width": 384, "height": 299, "positionAbsolute": {"x": 881.4474157285047, "y": 1132.8152548369983}, "dragging": false}, {"id": "TextInput-D2RBL", "type": "genericNode", "position": {"x": 880.343783480401, "y": 564.920075744147}, "data": {"type": "TextInput", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Text to be passed as input.", "title_case": false, "type": "str", "_input_type": "MultilineInput"}}, "description": "Get text inputs from the Playground.", "icon": "type", "base_classes": ["Message"], "display_name": "CSS", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "text", "display_name": "Text", "method": "text_response", "value": "__UNDEFINED__", "cache": true}], "field_order": ["input_value"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "TextInput-D2RBL", "description": "Get text inputs from the Playground.", "display_name": "CSS"}, "selected": true, "width": 384, "height": 299, "positionAbsolute": {"x": 880.343783480401, "y": 564.920075744147}, "dragging": false}, {"id": "DocumentBuilder-TdRli", "type": "genericNode", "position": {"x": 2540.6176753152636, "y": 727.921692828009}, "data": {"type": "DocumentBuilder", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "\r\nfrom langchain_core.documents import Document\r\n\r\n# from langflow.field_typing import Data\r\nfrom langflow.custom import Component\r\nfrom langflow.schema import Data\r\nfrom langflow.io import MessageTextInput, Output\r\n\r\nclass DocumentBuilder(Component):\r\n    display_name = \"Document Builder\"\r\n    description = \"Use as a template to create your own component.\"\r\n    documentation: str = \"http://docs.langflow.org/components/custom\"\r\n    icon = \"custom_components\"\r\n    name = \"DocumentBuilder\"\r\n\r\n    \r\n    inputs = [\r\n        MessageTextInput(name=\"path\", display_name=\"Path\", value=\"h\"),\r\n        MessageTextInput(name=\"component_description\", display_name=\"Description\", value=\"h\"),\r\n    ]\r\n\r\n\r\n    outputs = [\r\n        Output(display_name=\"Document Output\", name=\"document_output\", method=\"build_document\"),\r\n    ]\r\n\r\n    def build_document(self) -> list[Data]:\r\n        metadata = {\r\n            \"path\": self.path,\r\n            \"text\": self.component_description\r\n        }\r\n        \r\n        data = Data(data=metadata)\r\n        \r\n        #document = Document(page_content=self.component_description, metadata=metadata)\r\n        self.status = data\r\n        print(data)\r\n        return [data]\r\n        ", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "component_description": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "component_description", "display_name": "Description", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str"}, "path": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "path", "display_name": "Path", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str"}}, "description": "Use as a template to create your own component.", "icon": "custom_components", "base_classes": ["Data"], "display_name": "DocumentBuilder", "documentation": "http://docs.langflow.org/components/custom", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "document_output", "display_name": "Document Output", "method": "build_document", "value": "__UNDEFINED__", "cache": true, "hidden": false}], "field_order": ["path", "component_description"], "beta": false, "edited": true, "lf_version": "1.0.18"}, "id": "DocumentBuilder-TdRli", "description": "Use as a template to create your own component.", "display_name": "DocumentBuilder"}, "selected": false, "width": 384, "height": 413, "dragging": false, "positionAbsolute": {"x": 2540.6176753152636, "y": 727.921692828009}}, {"id": "TextInput-PjEeV", "type": "genericNode", "position": {"x": 1855.3719657937854, "y": 526.7606820008822}, "data": {"type": "TextInput", "node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "value": "", "name": "input_value", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Text to be passed as input.", "title_case": false, "type": "str"}}, "description": "Get text inputs from the Playground.", "icon": "type", "base_classes": ["Message"], "display_name": "Path", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "text", "display_name": "Text", "method": "text_response", "value": "__UNDEFINED__", "cache": true, "hidden": false}], "field_order": ["input_value"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "TextInput-PjEeV"}, "selected": false, "width": 384, "height": 299, "positionAbsolute": {"x": 1855.3719657937854, "y": 526.7606820008822}, "dragging": false}, {"id": "OllamaModel-JwfPJ", "type": "genericNode", "position": {"x": 1962.1406603850537, "y": 1049.4293650853724}, "data": {"type": "OllamaModel", "node": {"template": {"_type": "Component", "base_url": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "http://localhost:11434", "display_name": "Base URL", "advanced": false, "dynamic": false, "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value)\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, base_url_value: str) -> list[str]:\n        try:\n            url = urljoin(base_url_value, \"/api/tags\")\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3.1\",\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "format": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "format", "value": "", "display_name": "Format", "advanced": true, "dynamic": false, "info": "Specify the format of the output (e.g., json).", "title_case": false, "type": "str", "_input_type": "StrInput"}, "input_value": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageInput"}, "metadata": {"trace_as_input": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "metadata", "value": {}, "display_name": "Metadata", "advanced": true, "dynamic": false, "info": "Metadata to add to the run trace.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "mirostat": {"trace_as_metadata": true, "options": ["Disabled", "Mirostat", "Mirostat 2.0"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "mirostat", "value": "Disabled", "display_name": "Mirostat", "advanced": true, "dynamic": false, "info": "Enable/disable Mirostat sampling for controlling perplexity.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "mirostat_eta": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "mirostat_eta", "value": "", "display_name": "Mirostat Eta", "advanced": true, "dynamic": false, "info": "Learning rate for Mirostat algorithm. (Default: 0.1)", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "mirostat_tau": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "mirostat_tau", "value": "", "display_name": "Mirostat Tau", "advanced": true, "dynamic": false, "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "model_name": {"trace_as_metadata": true, "options": ["llama3.1:latest", "mistral:latest"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "llama3.1", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "Refer to https://ollama.com/library for more models.", "refresh_button": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "num_ctx": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "num_ctx", "value": "", "display_name": "Context Window Size", "advanced": true, "dynamic": false, "info": "Size of the context window for generating tokens. (Default: 2048)", "title_case": false, "type": "int", "_input_type": "IntInput"}, "num_gpu": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "num_gpu", "value": "", "display_name": "Number of GPUs", "advanced": true, "dynamic": false, "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)", "title_case": false, "type": "int", "_input_type": "IntInput"}, "num_thread": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "num_thread", "value": "", "display_name": "Number of Threads", "advanced": true, "dynamic": false, "info": "Number of threads to use during computation. (Default: detected for optimal performance)", "title_case": false, "type": "int", "_input_type": "IntInput"}, "repeat_last_n": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "repeat_last_n", "value": "", "display_name": "Repeat Last N", "advanced": true, "dynamic": false, "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)", "title_case": false, "type": "int", "_input_type": "IntInput"}, "repeat_penalty": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "repeat_penalty", "value": "", "display_name": "Repeat Penalty", "advanced": true, "dynamic": false, "info": "Penalty for repetitions in generated text. (Default: 1.1)", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "stop_tokens": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "stop_tokens", "value": "", "display_name": "Stop Tokens", "advanced": true, "dynamic": false, "info": "Comma-separated list of tokens to signal the model to stop generating text.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "stream": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "stream", "value": false, "display_name": "Stream", "advanced": true, "dynamic": false, "info": "Stream the response from the model. Streaming works only in Chat.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "system": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "system", "value": "", "display_name": "System", "advanced": true, "dynamic": false, "info": "System to use for generating text.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "system_message": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "system_message", "value": "", "display_name": "System Message", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "System message to pass to the model.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tags": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "tags", "value": "", "display_name": "Tags", "advanced": true, "dynamic": false, "info": "Comma-separated list of tags to add to the run trace.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "temperature": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.2, "display_name": "Temperature", "advanced": false, "dynamic": false, "info": "Controls the creativity of model responses.", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "template": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "template", "value": "", "display_name": "Template", "advanced": true, "dynamic": false, "info": "Template to use for generating text.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "tfs_z": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "tfs_z", "value": "", "display_name": "TFS Z", "advanced": true, "dynamic": false, "info": "Tail free sampling value. (Default: 1)", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "timeout": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "timeout", "value": "", "display_name": "Timeout", "advanced": true, "dynamic": false, "info": "Timeout for the request stream.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "top_k": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "top_k", "value": "", "display_name": "Top K", "advanced": true, "dynamic": false, "info": "Limits token selection to top K. (Default: 40)", "title_case": false, "type": "int", "_input_type": "IntInput"}, "top_p": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "top_p", "value": "", "display_name": "Top P", "advanced": true, "dynamic": false, "info": "Works together with top-k. (Default: 0.9)", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "verbose": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "verbose", "value": true, "display_name": "Verbose", "advanced": false, "dynamic": false, "info": "Whether to print out response text.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Generate text using Ollama Local LLMs.", "icon": "Ollama", "base_classes": ["LanguageModel", "Message"], "display_name": "Ollama", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "text_output", "display_name": "Text", "method": "text_response", "value": "__UNDEFINED__", "cache": true}, {"types": ["LanguageModel"], "selected": "LanguageModel", "name": "model_output", "display_name": "Language Model", "method": "build_model", "value": "__UNDEFINED__", "cache": true}], "field_order": ["input_value", "system_message", "stream", "base_url", "model_name", "temperature", "format", "metadata", "mirostat", "mirostat_eta", "mirostat_tau", "num_ctx", "num_gpu", "num_thread", "repeat_last_n", "repeat_penalty", "tfs_z", "timeout", "top_k", "top_p", "verbose", "tags", "stop_tokens", "system", "template"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "OllamaModel-JwfPJ"}, "selected": false, "width": 384, "height": 679, "positionAbsolute": {"x": 1962.1406603850537, "y": 1049.4293650853724}, "dragging": false}, {"id": "OllamaEmbeddings-AqjGH", "type": "genericNode", "position": {"x": 2714.2134119519214, "y": 1188.079648893789}, "data": {"type": "OllamaEmbeddings", "node": {"template": {"_type": "Component", "base_url": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "base_url", "value": "http://localhost:11434", "display_name": "Ollama Base URL", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_community.embeddings import OllamaEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import FloatInput, MessageTextInput, Output\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n    name = \"OllamaEmbeddings\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"model\",\n            display_name=\"Ollama Model\",\n            value=\"llama3.1\",\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"http://localhost:11434\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Model Temperature\",\n            value=0.1,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(\n                model=self.model,\n                base_url=self.base_url,\n                temperature=self.temperature,\n            )  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "model": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "model", "value": "llama3.1", "display_name": "Ollama Model", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "temperature": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Model Temperature", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "float", "_input_type": "FloatInput"}}, "description": "Generate embeddings using Ollama models.", "icon": "Ollama", "base_classes": ["Embeddings"], "display_name": "Ollama Embeddings", "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Embeddings"], "selected": "Embeddings", "name": "embeddings", "display_name": "Embeddings", "method": "build_embeddings", "value": "__UNDEFINED__", "cache": true}], "field_order": ["model", "base_url", "temperature"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "OllamaEmbeddings-AqjGH"}, "selected": false, "width": 384, "height": 393, "positionAbsolute": {"x": 2714.2134119519214, "y": 1188.079648893789}, "dragging": false}], "edges": [{"source": "TextInput-nPq0d", "sourceHandle": "{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-nPq0d\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt-KIm84", "targetHandle": "{\u0153fieldName\u0153:\u0153jsx\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "jsx", "id": "Prompt-KIm84", "inputTypes": ["Message", "Text"], "type": "str"}, "sourceHandle": {"dataType": "TextInput", "id": "TextInput-nPq0d", "name": "text", "output_types": ["Message"]}}, "id": "reactflow__edge-TextInput-nPq0d{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-nPq0d\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-KIm84{\u0153fieldName\u0153:\u0153jsx\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "TextInput-D2RBL", "sourceHandle": "{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-D2RBL\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt-KIm84", "targetHandle": "{\u0153fieldName\u0153:\u0153css\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "css", "id": "Prompt-KIm84", "inputTypes": ["Message", "Text"], "type": "str"}, "sourceHandle": {"dataType": "TextInput", "id": "TextInput-D2RBL", "name": "text", "output_types": ["Message"]}}, "id": "reactflow__edge-TextInput-D2RBL{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-D2RBL\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-KIm84{\u0153fieldName\u0153:\u0153css\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "DocumentBuilder-TdRli", "sourceHandle": "{\u0153dataType\u0153:\u0153DocumentBuilder\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153name\u0153:\u0153document_output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "AstraVectorStoreComponent-CsAeK", "targetHandle": "{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153AstraVectorStoreComponent-CsAeK\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "ingest_data", "id": "AstraVectorStoreComponent-CsAeK", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "DocumentBuilder", "id": "DocumentBuilder-TdRli", "name": "document_output", "output_types": ["Data"]}}, "id": "reactflow__edge-DocumentBuilder-TdRli{\u0153dataType\u0153:\u0153DocumentBuilder\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153name\u0153:\u0153document_output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-AstraVectorStoreComponent-CsAeK{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153AstraVectorStoreComponent-CsAeK\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "TextInput-PjEeV", "sourceHandle": "{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-PjEeV\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "DocumentBuilder-TdRli", "targetHandle": "{\u0153fieldName\u0153:\u0153path\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "path", "id": "DocumentBuilder-TdRli", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "TextInput", "id": "TextInput-PjEeV", "name": "text", "output_types": ["Message"]}}, "id": "reactflow__edge-TextInput-PjEeV{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-PjEeV\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-DocumentBuilder-TdRli{\u0153fieldName\u0153:\u0153path\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "Prompt-KIm84", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "OllamaModel-JwfPJ", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-JwfPJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "OllamaModel-JwfPJ", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Prompt", "id": "Prompt-KIm84", "name": "prompt", "output_types": ["Message"]}}, "id": "reactflow__edge-Prompt-KIm84{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-KIm84\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-JwfPJ{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-JwfPJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "OllamaModel-JwfPJ", "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-JwfPJ\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "DocumentBuilder-TdRli", "targetHandle": "{\u0153fieldName\u0153:\u0153component_description\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "component_description", "id": "DocumentBuilder-TdRli", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "OllamaModel", "id": "OllamaModel-JwfPJ", "name": "text_output", "output_types": ["Message"]}}, "id": "reactflow__edge-OllamaModel-JwfPJ{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-JwfPJ\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-DocumentBuilder-TdRli{\u0153fieldName\u0153:\u0153component_description\u0153,\u0153id\u0153:\u0153DocumentBuilder-TdRli\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "className": ""}, {"source": "OllamaEmbeddings-AqjGH", "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-AqjGH\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}", "target": "AstraVectorStoreComponent-CsAeK", "targetHandle": "{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153AstraVectorStoreComponent-CsAeK\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153,\u0153dict\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "embedding", "id": "AstraVectorStoreComponent-CsAeK", "inputTypes": ["Embeddings", "dict"], "type": "other"}, "sourceHandle": {"dataType": "OllamaEmbeddings", "id": "OllamaEmbeddings-AqjGH", "name": "embeddings", "output_types": ["Embeddings"]}}, "id": "reactflow__edge-OllamaEmbeddings-AqjGH{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-AqjGH\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraVectorStoreComponent-CsAeK{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153AstraVectorStoreComponent-CsAeK\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153,\u0153dict\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}], "viewport": {"x": -352.01383703155443, "y": -69.51726855917593, "zoom": 0.476017777873408}}}